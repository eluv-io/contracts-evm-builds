// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.
package tenant

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TenantMetaData contains all meta data concerning the Tenant contract.
var TenantMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tenantId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contentId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"ClearPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contentId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contentId\",\"type\":\"bytes32\"}],\"name\":\"ContentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contentId\",\"type\":\"bytes32\"}],\"name\":\"ContentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"addresspayable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewCreator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"addresspayable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contentId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contentId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"versionHash\",\"type\":\"string\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addEditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contentId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"newHash\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"commitSigned\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contentId\",\"type\":\"bytes32\"}],\"name\":\"confirmCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contentId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"versionHash\",\"type\":\"string\"}],\"name\":\"containHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contentId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"versionHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newHeadHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contentId\",\"type\":\"bytes32\"}],\"name\":\"getHeadHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"rmAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"rmEditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contentId\",\"type\":\"bytes32\"}],\"name\":\"undoCommit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620031303803806200313083398181016040528101906200003791906200015e565b326000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550806004819055505062000190565b600080fd5b6000819050919050565b620001388162000123565b81146200014457600080fd5b50565b60008151905062000158816200012d565b92915050565b6000602082840312156200017757620001766200011e565b5b6000620001878482850162000147565b91505092915050565b612f9080620001a06000396000f3fe6080604052600436106101015760003560e01c80636d2e4b1b11610095578063da502ee211610064578063da502ee214610307578063e5975bdc14610330578063ea89fd7014610359578063ef7d998014610382578063f2fde38b1461039e57610108565b80636d2e4b1b1461025f57806370480275146102885780638da5cb5b146102b1578063af570c04146102dc57610108565b806341c0e1b5116100d157806341c0e1b5146101c657806342a9b481146101dd578063603fb08d1461021a57806369448fe91461023657610108565b8062821de31461010a57806302d05d3f1461013557806331e4ffbd146101605780633e9c80061461018957610108565b3661010857005b005b34801561011657600080fd5b5061011f6103c7565b60405161012c9190611c93565b60405180910390f35b34801561014157600080fd5b5061014a6103f1565b6040516101579190611ccf565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190611d2a565b610415565b005b34801561019557600080fd5b506101b060048036038101906101ab9190611ed3565b610598565b6040516101bd9190611f4a565b60405180910390f35b3480156101d257600080fd5b506101db6105e2565b005b3480156101e957600080fd5b5061020460048036038101906101ff9190611f65565b610677565b6040516102119190612011565b60405180910390f35b610234600480360381019061022f9190611f65565b61071f565b005b34801561024257600080fd5b5061025d60048036038101906102589190612033565b610985565b005b34801561026b57600080fd5b50610286600480360381019061028191906120ea565b610d25565b005b34801561029457600080fd5b506102af60048036038101906102aa9190611d2a565b610e30565b005b3480156102bd57600080fd5b506102c6610fb2565b6040516102d39190611ccf565b60405180910390f35b3480156102e857600080fd5b506102f1610fd8565b6040516102fe9190611ccf565b60405180910390f35b34801561031357600080fd5b5061032e60048036038101906103299190611d2a565b610ffe565b005b34801561033c57600080fd5b5061035760048036038101906103529190611d2a565b61117f565b005b34801561036557600080fd5b50610380600480360381019061037b9190611f65565b611302565b005b61039c6004803603810190610397919061217c565b611653565b005b3480156103aa57600080fd5b506103c560048036038101906103c091906120ea565b6117a7565b005b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806002600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1610156104a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a090612271565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161161053b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610532906122dd565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055505050565b600060056000848152602001908152602001600020600201826040516105be9190612339565b908152602001604051809103902060009054906101000a900460ff16905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063c57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b606060056000838152602001908152602001600020600001805461069a9061237f565b80601f01602080910402602001604051908101604052809291908181526020018280546106c69061237f565b80156107135780601f106106e857610100808354040283529160200191610713565b820191906000526020600020905b8154815290600101906020018083116106f657829003601f168201915b50505050509050919050565b336000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16116107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906123fc565b60405180910390fd5b6005600083815260200190815260200160002060030160009054906101000a900460ff16610815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080c90612468565b60405180910390fd5b60006005600084815260200190815260200160002060040180546108389061237f565b80601f01602080910402602001604051908101604052809291908181526020018280546108649061237f565b80156108b15780601f10610886576101008083540402835291602001916108b1565b820191906000526020600020905b81548152906001019060200180831161089457829003601f168201915b5050505050905060006005600085815260200190815260200160002060030160006101000a81548160ff02191690831515021790555060405180602001604052806000815250600560008581526020019081526020016000206004019081610919919061263e565b507fbb380ac6b422e4e4dc2165e1c0774d9e19161ce07d624914855e5391e7211628600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109666103c7565b85846040516109789493929190612774565b60405180910390a1505050565b336000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1611610a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0f906123fc565b60405180910390fd5b610a228484610598565b610a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a589061280c565b60405180910390fd5b6000600560008681526020019081526020016000206001015411610aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab19061289e565b60405180910390fd5b600060056000868152602001908152602001600020600001604051602001610ae29190612941565b604051602081830303815290604052805190602001209050600084604051602001610b0d9190612339565b60405160208183030381529060405280519060200120905060016005600088815260200190815260200160002060010154118015610b4a57508082145b15610bbd57610b598685610598565b610b98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8f906129a4565b60405180910390fd5b83600560008881526020019081526020016000206000019081610bbb919061263e565b505b60006005600088815260200190815260200160002060020186604051610be39190612339565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600560008781526020019081526020016000206001016000815480929190610c2f906129f3565b91905055507ffa001c965a7cdc4b7bb881545350fa97b5cb15972c2c4110bf60bc63ce078780600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610c806103c7565b8888604051610c929493929190612774565b60405180910390a16000600560008881526020019081526020016000206001015403610d1d577f90ad3e4a3c923493a8c220fee236d2da0fe19793440efb15e455031321bcf05f600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610d046103c7565b88604051610d1493929190612a1c565b60405180910390a15b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d7d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610db657600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3edd90e7770f06fafde38004653b33870066c33bfc923ff6102acd601f85dfbc81604051610e259190611ccf565b60405180910390a150565b8060038060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614610ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb990612a9f565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161115610f55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4c90612b0b565b60405180910390fd5b6002600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8060038060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614611090576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108790612a9f565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1611611122576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111990612b77565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055505050565b806002600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161015611213576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120a90612271565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16146112a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129c90612be3565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055505050565b336000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1611611395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138c906123fc565b60405180910390fd5b6005600083815260200190815260200160002060030160009054906101000a900460ff166113f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ef90612c4f565b60405180910390fd5b600060056000848152602001908152602001600020600401805461141b9061237f565b80601f01602080910402602001604051908101604052809291908181526020018280546114479061237f565b80156114945780601f1061146957610100808354040283529160200191611494565b820191906000526020600020905b81548152906001019060200180831161147757829003601f168201915b50505050509050600160056000858152602001908152602001600020600201826040516114c19190612339565b908152602001604051809103902060006101000a81548160ff02191690831515021790555080600560008581526020019081526020016000206000019081611509919061263e565b5060006005600085815260200190815260200160002060030160006101000a81548160ff02191690831515021790555060006005600085815260200190815260200160002060010154036115bc577fdc558b05b1863c08def88a5d7d743191a4ec6391315bf6d242193b49e180b12b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166115a36103c7565b856040516115b393929190612a1c565b60405180910390a15b6005600084815260200190815260200160002060010160008154809291906115e390612c6f565b91905055507f9ea4698cf03054cf1162e170f29c8b7e0dd57bf427ddbe9c7eb0f8072992bfe6600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166116346103c7565b85846040516116469493929190612774565b60405180910390a1505050565b336000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16116116e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116dd906123fc565b60405180910390fd5b6117938786600560008b8152602001908152602001600020600001805461170c9061237f565b80601f01602080910402602001604051908101604052809291908181526020018280546117389061237f565b80156117855780601f1061175a57610100808354040283529160200191611785565b820191906000526020600020905b81548152906001019060200180831161176857829003601f168201915b5050505050898888886118b5565b61179e8787876119f5565b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461180157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361183a57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3edd90e7770f06fafde38004653b33870066c33bfc923ff6102acd601f85dfbc816040516118aa9190611ccf565b60405180910390a150565b60006001888888886040516020016118d09493929190612cb7565b60405160208183030381529060405280519060200120858585604051600081526020016040526040516119069493929190612d19565b6020604051602081039080840390855afa158015611928573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036119a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199a90612daa565b60405180910390fd5b6119ac81611bf7565b6119eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e290612e3c565b60405180910390fd5b5050505050505050565b336000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1611611a88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7f906123fc565b60405180910390fd5b6005600085815260200190815260200160002060030160009054906101000a900460ff161580611ab55750825b611af4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aeb90612ece565b60405180910390fd5b6000825111611b38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2f90612f3a565b60405180910390fd5b60016005600086815260200190815260200160002060030160006101000a81548160ff02191690831515021790555081600560008681526020019081526020016000206004019081611b8a919061263e565b507f78eff0e1e3f130f55bc136da33cea191293cd035a0891509d675bce5154ede1f600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611bd76103c7565b8685604051611be99493929190612774565b60405180910390a150505050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16119050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c7d82611c52565b9050919050565b611c8d81611c72565b82525050565b6000602082019050611ca86000830184611c84565b92915050565b6000611cb982611c52565b9050919050565b611cc981611cae565b82525050565b6000602082019050611ce46000830184611cc0565b92915050565b6000604051905090565b600080fd5b600080fd5b611d0781611c72565b8114611d1257600080fd5b50565b600081359050611d2481611cfe565b92915050565b600060208284031215611d4057611d3f611cf4565b5b6000611d4e84828501611d15565b91505092915050565b6000819050919050565b611d6a81611d57565b8114611d7557600080fd5b50565b600081359050611d8781611d61565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611de082611d97565b810181811067ffffffffffffffff82111715611dff57611dfe611da8565b5b80604052505050565b6000611e12611cea565b9050611e1e8282611dd7565b919050565b600067ffffffffffffffff821115611e3e57611e3d611da8565b5b611e4782611d97565b9050602081019050919050565b82818337600083830152505050565b6000611e76611e7184611e23565b611e08565b905082815260208101848484011115611e9257611e91611d92565b5b611e9d848285611e54565b509392505050565b600082601f830112611eba57611eb9611d8d565b5b8135611eca848260208601611e63565b91505092915050565b60008060408385031215611eea57611ee9611cf4565b5b6000611ef885828601611d78565b925050602083013567ffffffffffffffff811115611f1957611f18611cf9565b5b611f2585828601611ea5565b9150509250929050565b60008115159050919050565b611f4481611f2f565b82525050565b6000602082019050611f5f6000830184611f3b565b92915050565b600060208284031215611f7b57611f7a611cf4565b5b6000611f8984828501611d78565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611fcc578082015181840152602081019050611fb1565b60008484015250505050565b6000611fe382611f92565b611fed8185611f9d565b9350611ffd818560208601611fae565b61200681611d97565b840191505092915050565b6000602082019050818103600083015261202b8184611fd8565b905092915050565b60008060006060848603121561204c5761204b611cf4565b5b600061205a86828701611d78565b935050602084013567ffffffffffffffff81111561207b5761207a611cf9565b5b61208786828701611ea5565b925050604084013567ffffffffffffffff8111156120a8576120a7611cf9565b5b6120b486828701611ea5565b9150509250925092565b6120c781611cae565b81146120d257600080fd5b50565b6000813590506120e4816120be565b92915050565b600060208284031215612100576120ff611cf4565b5b600061210e848285016120d5565b91505092915050565b61212081611f2f565b811461212b57600080fd5b50565b60008135905061213d81612117565b92915050565b600060ff82169050919050565b61215981612143565b811461216457600080fd5b50565b60008135905061217681612150565b92915050565b60008060008060008060c0878903121561219957612198611cf4565b5b60006121a789828a01611d78565b96505060206121b889828a0161212e565b955050604087013567ffffffffffffffff8111156121d9576121d8611cf9565b5b6121e589828a01611ea5565b94505060606121f689828a01612167565b935050608061220789828a01611d78565b92505060a061221889828a01611d78565b9150509295509295509295565b7f6f6e6c792041646d696e2075736572732061726520617574686f72697a656400600082015250565b600061225b601f83611f9d565b915061226682612225565b602082019050919050565b6000602082019050818103600083015261228a8161224e565b9050919050565b7f546869732075736572206973206e6f7420616e20656469746f72000000000000600082015250565b60006122c7601a83611f9d565b91506122d282612291565b602082019050919050565b600060208201905081810360008301526122f6816122ba565b9050919050565b600081905092915050565b600061231382611f92565b61231d81856122fd565b935061232d818560208601611fae565b80840191505092915050565b60006123458284612308565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061239757607f821691505b6020821081036123aa576123a9612350565b5b50919050565b7f6f6e6c7920456469746f722075736572732061726520617574686f72697a6564600082015250565b60006123e6602083611f9d565b91506123f1826123b0565b602082019050919050565b60006020820190508181036000830152612415816123d9565b9050919050565b7f7468657265206973206e6f20636f6d6d69740000000000000000000000000000600082015250565b6000612452601283611f9d565b915061245d8261241c565b602082019050919050565b6000602082019050818103600083015261248181612445565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026124ea7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826124ad565b6124f486836124ad565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061253b6125366125318461250c565b612516565b61250c565b9050919050565b6000819050919050565b61255583612520565b61256961256182612542565b8484546124ba565b825550505050565b600090565b61257e612571565b61258981848461254c565b505050565b5b818110156125ad576125a2600082612576565b60018101905061258f565b5050565b601f8211156125f2576125c381612488565b6125cc8461249d565b810160208510156125db578190505b6125ef6125e78561249d565b83018261258e565b50505b505050565b600082821c905092915050565b6000612615600019846008026125f7565b1980831691505092915050565b600061262e8383612604565b9150826002028217905092915050565b61264782611f92565b67ffffffffffffffff8111156126605761265f611da8565b5b61266a825461237f565b6126758282856125b1565b600060209050601f8311600181146126a85760008415612696578287015190505b6126a08582612622565b865550612708565b601f1984166126b686612488565b60005b828110156126de578489015182556001820191506020850194506020810190506126b9565b868310156126fb57848901516126f7601f891682612604565b8355505b6001600288020188555050505b505050505050565b600061272b61272661272184611c52565b612516565b611c52565b9050919050565b600061273d82612710565b9050919050565b600061274f82612732565b9050919050565b61275f81612744565b82525050565b61276e81611d57565b82525050565b60006080820190506127896000830187612756565b6127966020830186611c84565b6127a36040830185612765565b81810360608301526127b58184611fd8565b905095945050505050565b7f74686973206861736820646f6573206e6f742065786973740000000000000000600082015250565b60006127f6601883611f9d565b9150612801826127c0565b602082019050919050565b60006020820190508181036000830152612825816127e9565b9050919050565b7f7468697320636f6e74656e7420646f6573206e6f7420636f6e7461696e20616e60008201527f7920686173686573000000000000000000000000000000000000000000000000602082015250565b6000612888602883611f9d565b91506128938261282c565b604082019050919050565b600060208201905081810360008301526128b78161287b565b9050919050565b600081546128cb8161237f565b6128d581866122fd565b945060018216600081146128f0576001811461290557612938565b60ff1983168652811515820286019350612938565b61290e85612488565b60005b8381101561293057815481890152600182019150602081019050612911565b838801955050505b50505092915050565b600061294d82846128be565b915081905092915050565b7f746865206e65772068656164206973206e6f742076616c696400000000000000600082015250565b600061298e601983611f9d565b915061299982612958565b602082019050919050565b600060208201905081810360008301526129bd81612981565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129fe8261250c565b915060008203612a1157612a106129c4565b5b600182039050919050565b6000606082019050612a316000830186612756565b612a3e6020830185611c84565b612a4b6040830184612765565b949350505050565b7f6f6e6c7920526f6f74207573657220697320617574686f72697a656400000000600082015250565b6000612a89601c83611f9d565b9150612a9482612a53565b602082019050919050565b60006020820190508181036000830152612ab881612a7c565b9050919050565b7f54686973207573657220697320616c726561647920616e2061646d696e000000600082015250565b6000612af5601d83611f9d565b9150612b0082612abf565b602082019050919050565b60006020820190508181036000830152612b2481612ae8565b9050919050565b7f546869732075736572206973206e6f7420616e2061646d696e00000000000000600082015250565b6000612b61601983611f9d565b9150612b6c82612b2b565b602082019050919050565b60006020820190508181036000830152612b9081612b54565b9050919050565b7f54686973207573657220697320616c726561647920616e20656469746f720000600082015250565b6000612bcd601e83611f9d565b9150612bd882612b97565b602082019050919050565b60006020820190508181036000830152612bfc81612bc0565b9050919050565b7f6e6f7468696e6720746f20636f6d6d6974000000000000000000000000000000600082015250565b6000612c39601183611f9d565b9150612c4482612c03565b602082019050919050565b60006020820190508181036000830152612c6881612c2c565b9050919050565b6000612c7a8261250c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612cac57612cab6129c4565b5b600182019050919050565b6000608082019050612ccc6000830187612765565b8181036020830152612cde8186611fd8565b90508181036040830152612cf28185611fd8565b9050612d016060830184611f3b565b95945050505050565b612d1381612143565b82525050565b6000608082019050612d2e6000830187612765565b612d3b6020830186612d0a565b612d486040830185612765565b612d556060830184612765565b95945050505050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000612d94601183611f9d565b9150612d9f82612d5e565b602082019050919050565b60006020820190508181036000830152612dc381612d87565b9050919050565b7f74686520616464726573732074686174207369676e2074686973206d6573736160008201527f6765206973206e6f7420616e20656469746f7200000000000000000000000000602082015250565b6000612e26603383611f9d565b9150612e3182612dca565b604082019050919050565b60006020820190508181036000830152612e5581612e19565b9050919050565b7f616e6f74686572207573657220636f6d6d6974206174207468652073616d652060008201527f74696d65207468616e20796f752c207265747279000000000000000000000000602082015250565b6000612eb8603483611f9d565b9150612ec382612e5c565b604082019050919050565b60006020820190508181036000830152612ee781612eab565b9050919050565b7f646f206e6f7420636f6d6d697420616e20656d70747920686173680000000000600082015250565b6000612f24601b83611f9d565b9150612f2f82612eee565b602082019050919050565b60006020820190508181036000830152612f5381612f17565b905091905056fea26469706673582212200d03dc48135ad13959c17f13e1b71822db42de32e241b7bc0ef0ca6ad7b61d3164736f6c63430008100033",
}

// TenantABI is the input ABI used to generate the binding from.
// Deprecated: Use TenantMetaData.ABI instead.
var TenantABI = TenantMetaData.ABI

// TenantBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TenantMetaData.Bin instead.
var TenantBin = TenantMetaData.Bin

// DeployTenant deploys a new Ethereum contract, binding an instance of Tenant to it.
func DeployTenant(auth *bind.TransactOpts, backend bind.ContractBackend, _tenantId [32]byte) (common.Address, *types.Transaction, *Tenant, error) {
	parsed, err := TenantMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TenantBin), backend, _tenantId)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Tenant{TenantCaller: TenantCaller{contract: contract}, TenantTransactor: TenantTransactor{contract: contract}, TenantFilterer: TenantFilterer{contract: contract}}, nil
}

// Tenant is an auto generated Go binding around an Ethereum contract.
type Tenant struct {
	TenantCaller     // Read-only binding to the contract
	TenantTransactor // Write-only binding to the contract
	TenantFilterer   // Log filterer for contract events
}

// TenantCaller is an auto generated read-only Go binding around an Ethereum contract.
type TenantCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TenantTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TenantTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TenantFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TenantFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TenantSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TenantSession struct {
	Contract     *Tenant           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TenantCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TenantCallerSession struct {
	Contract *TenantCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// TenantTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TenantTransactorSession struct {
	Contract     *TenantTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TenantRaw is an auto generated low-level Go binding around an Ethereum contract.
type TenantRaw struct {
	Contract *Tenant // Generic contract binding to access the raw methods on
}

// TenantCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TenantCallerRaw struct {
	Contract *TenantCaller // Generic read-only contract binding to access the raw methods on
}

// TenantTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TenantTransactorRaw struct {
	Contract *TenantTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTenant creates a new instance of Tenant, bound to a specific deployed contract.
func NewTenant(address common.Address, backend bind.ContractBackend) (*Tenant, error) {
	contract, err := bindTenant(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Tenant{TenantCaller: TenantCaller{contract: contract}, TenantTransactor: TenantTransactor{contract: contract}, TenantFilterer: TenantFilterer{contract: contract}}, nil
}

// NewTenantCaller creates a new read-only instance of Tenant, bound to a specific deployed contract.
func NewTenantCaller(address common.Address, caller bind.ContractCaller) (*TenantCaller, error) {
	contract, err := bindTenant(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TenantCaller{contract: contract}, nil
}

// NewTenantTransactor creates a new write-only instance of Tenant, bound to a specific deployed contract.
func NewTenantTransactor(address common.Address, transactor bind.ContractTransactor) (*TenantTransactor, error) {
	contract, err := bindTenant(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TenantTransactor{contract: contract}, nil
}

// NewTenantFilterer creates a new log filterer instance of Tenant, bound to a specific deployed contract.
func NewTenantFilterer(address common.Address, filterer bind.ContractFilterer) (*TenantFilterer, error) {
	contract, err := bindTenant(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TenantFilterer{contract: contract}, nil
}

// bindTenant binds a generic wrapper to an already deployed contract.
func bindTenant(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TenantABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Tenant *TenantRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Tenant.Contract.TenantCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Tenant *TenantRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Tenant.Contract.TenantTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Tenant *TenantRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Tenant.Contract.TenantTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Tenant *TenantCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Tenant.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Tenant *TenantTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Tenant.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Tenant *TenantTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Tenant.Contract.contract.Transact(opts, method, params...)
}

// ContainHash is a free data retrieval call binding the contract method 0x3e9c8006.
//
// Solidity: function containHash(bytes32 contentId, string versionHash) view returns(bool)
func (_Tenant *TenantCaller) ContainHash(opts *bind.CallOpts, contentId [32]byte, versionHash string) (bool, error) {
	var out []interface{}
	err := _Tenant.contract.Call(opts, &out, "containHash", contentId, versionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContainHash is a free data retrieval call binding the contract method 0x3e9c8006.
//
// Solidity: function containHash(bytes32 contentId, string versionHash) view returns(bool)
func (_Tenant *TenantSession) ContainHash(contentId [32]byte, versionHash string) (bool, error) {
	return _Tenant.Contract.ContainHash(&_Tenant.CallOpts, contentId, versionHash)
}

// ContainHash is a free data retrieval call binding the contract method 0x3e9c8006.
//
// Solidity: function containHash(bytes32 contentId, string versionHash) view returns(bool)
func (_Tenant *TenantCallerSession) ContainHash(contentId [32]byte, versionHash string) (bool, error) {
	return _Tenant.Contract.ContainHash(&_Tenant.CallOpts, contentId, versionHash)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Tenant *TenantCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Tenant.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Tenant *TenantSession) ContentSpace() (common.Address, error) {
	return _Tenant.Contract.ContentSpace(&_Tenant.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Tenant *TenantCallerSession) ContentSpace() (common.Address, error) {
	return _Tenant.Contract.ContentSpace(&_Tenant.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Tenant *TenantCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Tenant.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Tenant *TenantSession) Creator() (common.Address, error) {
	return _Tenant.Contract.Creator(&_Tenant.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Tenant *TenantCallerSession) Creator() (common.Address, error) {
	return _Tenant.Contract.Creator(&_Tenant.CallOpts)
}

// GetHeadHash is a free data retrieval call binding the contract method 0x42a9b481.
//
// Solidity: function getHeadHash(bytes32 contentId) view returns(string)
func (_Tenant *TenantCaller) GetHeadHash(opts *bind.CallOpts, contentId [32]byte) (string, error) {
	var out []interface{}
	err := _Tenant.contract.Call(opts, &out, "getHeadHash", contentId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetHeadHash is a free data retrieval call binding the contract method 0x42a9b481.
//
// Solidity: function getHeadHash(bytes32 contentId) view returns(string)
func (_Tenant *TenantSession) GetHeadHash(contentId [32]byte) (string, error) {
	return _Tenant.Contract.GetHeadHash(&_Tenant.CallOpts, contentId)
}

// GetHeadHash is a free data retrieval call binding the contract method 0x42a9b481.
//
// Solidity: function getHeadHash(bytes32 contentId) view returns(string)
func (_Tenant *TenantCallerSession) GetHeadHash(contentId [32]byte) (string, error) {
	return _Tenant.Contract.GetHeadHash(&_Tenant.CallOpts, contentId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Tenant *TenantCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Tenant.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Tenant *TenantSession) Owner() (common.Address, error) {
	return _Tenant.Contract.Owner(&_Tenant.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Tenant *TenantCallerSession) Owner() (common.Address, error) {
	return _Tenant.Contract.Owner(&_Tenant.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_Tenant *TenantCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Tenant.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_Tenant *TenantSession) ParentAddress() (common.Address, error) {
	return _Tenant.Contract.ParentAddress(&_Tenant.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_Tenant *TenantCallerSession) ParentAddress() (common.Address, error) {
	return _Tenant.Contract.ParentAddress(&_Tenant.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address addr) returns()
func (_Tenant *TenantTransactor) AddAdmin(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Tenant.contract.Transact(opts, "addAdmin", addr)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address addr) returns()
func (_Tenant *TenantSession) AddAdmin(addr common.Address) (*types.Transaction, error) {
	return _Tenant.Contract.AddAdmin(&_Tenant.TransactOpts, addr)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address addr) returns()
func (_Tenant *TenantTransactorSession) AddAdmin(addr common.Address) (*types.Transaction, error) {
	return _Tenant.Contract.AddAdmin(&_Tenant.TransactOpts, addr)
}

// AddEditor is a paid mutator transaction binding the contract method 0xe5975bdc.
//
// Solidity: function addEditor(address addr) returns()
func (_Tenant *TenantTransactor) AddEditor(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Tenant.contract.Transact(opts, "addEditor", addr)
}

// AddEditor is a paid mutator transaction binding the contract method 0xe5975bdc.
//
// Solidity: function addEditor(address addr) returns()
func (_Tenant *TenantSession) AddEditor(addr common.Address) (*types.Transaction, error) {
	return _Tenant.Contract.AddEditor(&_Tenant.TransactOpts, addr)
}

// AddEditor is a paid mutator transaction binding the contract method 0xe5975bdc.
//
// Solidity: function addEditor(address addr) returns()
func (_Tenant *TenantTransactorSession) AddEditor(addr common.Address) (*types.Transaction, error) {
	return _Tenant.Contract.AddEditor(&_Tenant.TransactOpts, addr)
}

// CommitSigned is a paid mutator transaction binding the contract method 0xef7d9980.
//
// Solidity: function commitSigned(bytes32 contentId, bool force, string newHash, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_Tenant *TenantTransactor) CommitSigned(opts *bind.TransactOpts, contentId [32]byte, force bool, newHash string, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Tenant.contract.Transact(opts, "commitSigned", contentId, force, newHash, v, r, s)
}

// CommitSigned is a paid mutator transaction binding the contract method 0xef7d9980.
//
// Solidity: function commitSigned(bytes32 contentId, bool force, string newHash, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_Tenant *TenantSession) CommitSigned(contentId [32]byte, force bool, newHash string, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Tenant.Contract.CommitSigned(&_Tenant.TransactOpts, contentId, force, newHash, v, r, s)
}

// CommitSigned is a paid mutator transaction binding the contract method 0xef7d9980.
//
// Solidity: function commitSigned(bytes32 contentId, bool force, string newHash, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_Tenant *TenantTransactorSession) CommitSigned(contentId [32]byte, force bool, newHash string, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Tenant.Contract.CommitSigned(&_Tenant.TransactOpts, contentId, force, newHash, v, r, s)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0xea89fd70.
//
// Solidity: function confirmCommit(bytes32 contentId) returns()
func (_Tenant *TenantTransactor) ConfirmCommit(opts *bind.TransactOpts, contentId [32]byte) (*types.Transaction, error) {
	return _Tenant.contract.Transact(opts, "confirmCommit", contentId)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0xea89fd70.
//
// Solidity: function confirmCommit(bytes32 contentId) returns()
func (_Tenant *TenantSession) ConfirmCommit(contentId [32]byte) (*types.Transaction, error) {
	return _Tenant.Contract.ConfirmCommit(&_Tenant.TransactOpts, contentId)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0xea89fd70.
//
// Solidity: function confirmCommit(bytes32 contentId) returns()
func (_Tenant *TenantTransactorSession) ConfirmCommit(contentId [32]byte) (*types.Transaction, error) {
	return _Tenant.Contract.ConfirmCommit(&_Tenant.TransactOpts, contentId)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0x69448fe9.
//
// Solidity: function deleteVersion(bytes32 contentId, string versionHash, string newHeadHash) returns()
func (_Tenant *TenantTransactor) DeleteVersion(opts *bind.TransactOpts, contentId [32]byte, versionHash string, newHeadHash string) (*types.Transaction, error) {
	return _Tenant.contract.Transact(opts, "deleteVersion", contentId, versionHash, newHeadHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0x69448fe9.
//
// Solidity: function deleteVersion(bytes32 contentId, string versionHash, string newHeadHash) returns()
func (_Tenant *TenantSession) DeleteVersion(contentId [32]byte, versionHash string, newHeadHash string) (*types.Transaction, error) {
	return _Tenant.Contract.DeleteVersion(&_Tenant.TransactOpts, contentId, versionHash, newHeadHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0x69448fe9.
//
// Solidity: function deleteVersion(bytes32 contentId, string versionHash, string newHeadHash) returns()
func (_Tenant *TenantTransactorSession) DeleteVersion(contentId [32]byte, versionHash string, newHeadHash string) (*types.Transaction, error) {
	return _Tenant.Contract.DeleteVersion(&_Tenant.TransactOpts, contentId, versionHash, newHeadHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Tenant *TenantTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Tenant.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Tenant *TenantSession) Kill() (*types.Transaction, error) {
	return _Tenant.Contract.Kill(&_Tenant.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Tenant *TenantTransactorSession) Kill() (*types.Transaction, error) {
	return _Tenant.Contract.Kill(&_Tenant.TransactOpts)
}

// RmAdmin is a paid mutator transaction binding the contract method 0xda502ee2.
//
// Solidity: function rmAdmin(address addr) returns()
func (_Tenant *TenantTransactor) RmAdmin(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Tenant.contract.Transact(opts, "rmAdmin", addr)
}

// RmAdmin is a paid mutator transaction binding the contract method 0xda502ee2.
//
// Solidity: function rmAdmin(address addr) returns()
func (_Tenant *TenantSession) RmAdmin(addr common.Address) (*types.Transaction, error) {
	return _Tenant.Contract.RmAdmin(&_Tenant.TransactOpts, addr)
}

// RmAdmin is a paid mutator transaction binding the contract method 0xda502ee2.
//
// Solidity: function rmAdmin(address addr) returns()
func (_Tenant *TenantTransactorSession) RmAdmin(addr common.Address) (*types.Transaction, error) {
	return _Tenant.Contract.RmAdmin(&_Tenant.TransactOpts, addr)
}

// RmEditor is a paid mutator transaction binding the contract method 0x31e4ffbd.
//
// Solidity: function rmEditor(address addr) returns()
func (_Tenant *TenantTransactor) RmEditor(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Tenant.contract.Transact(opts, "rmEditor", addr)
}

// RmEditor is a paid mutator transaction binding the contract method 0x31e4ffbd.
//
// Solidity: function rmEditor(address addr) returns()
func (_Tenant *TenantSession) RmEditor(addr common.Address) (*types.Transaction, error) {
	return _Tenant.Contract.RmEditor(&_Tenant.TransactOpts, addr)
}

// RmEditor is a paid mutator transaction binding the contract method 0x31e4ffbd.
//
// Solidity: function rmEditor(address addr) returns()
func (_Tenant *TenantTransactorSession) RmEditor(addr common.Address) (*types.Transaction, error) {
	return _Tenant.Contract.RmEditor(&_Tenant.TransactOpts, addr)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Tenant *TenantTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Tenant.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Tenant *TenantSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Tenant.Contract.TransferCreatorship(&_Tenant.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Tenant *TenantTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Tenant.Contract.TransferCreatorship(&_Tenant.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Tenant *TenantTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Tenant.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Tenant *TenantSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Tenant.Contract.TransferOwnership(&_Tenant.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Tenant *TenantTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Tenant.Contract.TransferOwnership(&_Tenant.TransactOpts, newOwner)
}

// UndoCommit is a paid mutator transaction binding the contract method 0x603fb08d.
//
// Solidity: function undoCommit(bytes32 contentId) payable returns()
func (_Tenant *TenantTransactor) UndoCommit(opts *bind.TransactOpts, contentId [32]byte) (*types.Transaction, error) {
	return _Tenant.contract.Transact(opts, "undoCommit", contentId)
}

// UndoCommit is a paid mutator transaction binding the contract method 0x603fb08d.
//
// Solidity: function undoCommit(bytes32 contentId) payable returns()
func (_Tenant *TenantSession) UndoCommit(contentId [32]byte) (*types.Transaction, error) {
	return _Tenant.Contract.UndoCommit(&_Tenant.TransactOpts, contentId)
}

// UndoCommit is a paid mutator transaction binding the contract method 0x603fb08d.
//
// Solidity: function undoCommit(bytes32 contentId) payable returns()
func (_Tenant *TenantTransactorSession) UndoCommit(contentId [32]byte) (*types.Transaction, error) {
	return _Tenant.Contract.UndoCommit(&_Tenant.TransactOpts, contentId)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Tenant *TenantTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Tenant.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Tenant *TenantSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Tenant.Contract.Fallback(&_Tenant.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Tenant *TenantTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Tenant.Contract.Fallback(&_Tenant.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Tenant *TenantTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Tenant.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Tenant *TenantSession) Receive() (*types.Transaction, error) {
	return _Tenant.Contract.Receive(&_Tenant.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Tenant *TenantTransactorSession) Receive() (*types.Transaction, error) {
	return _Tenant.Contract.Receive(&_Tenant.TransactOpts)
}

// TenantClearPendingIterator is returned from FilterClearPending and is used to iterate over the raw logs and unpacked data for ClearPending events raised by the Tenant contract.
type TenantClearPendingIterator struct {
	Event *TenantClearPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantClearPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantClearPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantClearPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantClearPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantClearPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantClearPending represents a ClearPending event raised by the Tenant contract.
type TenantClearPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ContentId     [32]byte
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterClearPending is a free log retrieval operation binding the contract event 0xbb380ac6b422e4e4dc2165e1c0774d9e19161ce07d624914855e5391e7211628.
//
// Solidity: event ClearPending(address spaceAddress, address parentAddress, bytes32 contentId, string objectHash)
func (_Tenant *TenantFilterer) FilterClearPending(opts *bind.FilterOpts) (*TenantClearPendingIterator, error) {

	logs, sub, err := _Tenant.contract.FilterLogs(opts, "ClearPending")
	if err != nil {
		return nil, err
	}
	return &TenantClearPendingIterator{contract: _Tenant.contract, event: "ClearPending", logs: logs, sub: sub}, nil
}

// WatchClearPending is a free log subscription operation binding the contract event 0xbb380ac6b422e4e4dc2165e1c0774d9e19161ce07d624914855e5391e7211628.
//
// Solidity: event ClearPending(address spaceAddress, address parentAddress, bytes32 contentId, string objectHash)
func (_Tenant *TenantFilterer) WatchClearPending(opts *bind.WatchOpts, sink chan<- *TenantClearPending) (event.Subscription, error) {

	logs, sub, err := _Tenant.contract.WatchLogs(opts, "ClearPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantClearPending)
				if err := _Tenant.contract.UnpackLog(event, "ClearPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClearPending is a log parse operation binding the contract event 0xbb380ac6b422e4e4dc2165e1c0774d9e19161ce07d624914855e5391e7211628.
//
// Solidity: event ClearPending(address spaceAddress, address parentAddress, bytes32 contentId, string objectHash)
func (_Tenant *TenantFilterer) ParseClearPending(log types.Log) (*TenantClearPending, error) {
	event := new(TenantClearPending)
	if err := _Tenant.contract.UnpackLog(event, "ClearPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TenantCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the Tenant contract.
type TenantCommitPendingIterator struct {
	Event *TenantCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantCommitPending represents a CommitPending event raised by the Tenant contract.
type TenantCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ContentId     [32]byte
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0x78eff0e1e3f130f55bc136da33cea191293cd035a0891509d675bce5154ede1f.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, bytes32 contentId, string objectHash)
func (_Tenant *TenantFilterer) FilterCommitPending(opts *bind.FilterOpts) (*TenantCommitPendingIterator, error) {

	logs, sub, err := _Tenant.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &TenantCommitPendingIterator{contract: _Tenant.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0x78eff0e1e3f130f55bc136da33cea191293cd035a0891509d675bce5154ede1f.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, bytes32 contentId, string objectHash)
func (_Tenant *TenantFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *TenantCommitPending) (event.Subscription, error) {

	logs, sub, err := _Tenant.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantCommitPending)
				if err := _Tenant.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0x78eff0e1e3f130f55bc136da33cea191293cd035a0891509d675bce5154ede1f.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, bytes32 contentId, string objectHash)
func (_Tenant *TenantFilterer) ParseCommitPending(log types.Log) (*TenantCommitPending, error) {
	event := new(TenantCommitPending)
	if err := _Tenant.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TenantContentAddedIterator is returned from FilterContentAdded and is used to iterate over the raw logs and unpacked data for ContentAdded events raised by the Tenant contract.
type TenantContentAddedIterator struct {
	Event *TenantContentAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantContentAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantContentAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantContentAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantContentAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantContentAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantContentAdded represents a ContentAdded event raised by the Tenant contract.
type TenantContentAdded struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ContentId     [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterContentAdded is a free log retrieval operation binding the contract event 0xdc558b05b1863c08def88a5d7d743191a4ec6391315bf6d242193b49e180b12b.
//
// Solidity: event ContentAdded(address spaceAddress, address parentAddress, bytes32 contentId)
func (_Tenant *TenantFilterer) FilterContentAdded(opts *bind.FilterOpts) (*TenantContentAddedIterator, error) {

	logs, sub, err := _Tenant.contract.FilterLogs(opts, "ContentAdded")
	if err != nil {
		return nil, err
	}
	return &TenantContentAddedIterator{contract: _Tenant.contract, event: "ContentAdded", logs: logs, sub: sub}, nil
}

// WatchContentAdded is a free log subscription operation binding the contract event 0xdc558b05b1863c08def88a5d7d743191a4ec6391315bf6d242193b49e180b12b.
//
// Solidity: event ContentAdded(address spaceAddress, address parentAddress, bytes32 contentId)
func (_Tenant *TenantFilterer) WatchContentAdded(opts *bind.WatchOpts, sink chan<- *TenantContentAdded) (event.Subscription, error) {

	logs, sub, err := _Tenant.contract.WatchLogs(opts, "ContentAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantContentAdded)
				if err := _Tenant.contract.UnpackLog(event, "ContentAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentAdded is a log parse operation binding the contract event 0xdc558b05b1863c08def88a5d7d743191a4ec6391315bf6d242193b49e180b12b.
//
// Solidity: event ContentAdded(address spaceAddress, address parentAddress, bytes32 contentId)
func (_Tenant *TenantFilterer) ParseContentAdded(log types.Log) (*TenantContentAdded, error) {
	event := new(TenantContentAdded)
	if err := _Tenant.contract.UnpackLog(event, "ContentAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TenantContentRemovedIterator is returned from FilterContentRemoved and is used to iterate over the raw logs and unpacked data for ContentRemoved events raised by the Tenant contract.
type TenantContentRemovedIterator struct {
	Event *TenantContentRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantContentRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantContentRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantContentRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantContentRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantContentRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantContentRemoved represents a ContentRemoved event raised by the Tenant contract.
type TenantContentRemoved struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ContentId     [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterContentRemoved is a free log retrieval operation binding the contract event 0x90ad3e4a3c923493a8c220fee236d2da0fe19793440efb15e455031321bcf05f.
//
// Solidity: event ContentRemoved(address spaceAddress, address parentAddress, bytes32 contentId)
func (_Tenant *TenantFilterer) FilterContentRemoved(opts *bind.FilterOpts) (*TenantContentRemovedIterator, error) {

	logs, sub, err := _Tenant.contract.FilterLogs(opts, "ContentRemoved")
	if err != nil {
		return nil, err
	}
	return &TenantContentRemovedIterator{contract: _Tenant.contract, event: "ContentRemoved", logs: logs, sub: sub}, nil
}

// WatchContentRemoved is a free log subscription operation binding the contract event 0x90ad3e4a3c923493a8c220fee236d2da0fe19793440efb15e455031321bcf05f.
//
// Solidity: event ContentRemoved(address spaceAddress, address parentAddress, bytes32 contentId)
func (_Tenant *TenantFilterer) WatchContentRemoved(opts *bind.WatchOpts, sink chan<- *TenantContentRemoved) (event.Subscription, error) {

	logs, sub, err := _Tenant.contract.WatchLogs(opts, "ContentRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantContentRemoved)
				if err := _Tenant.contract.UnpackLog(event, "ContentRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentRemoved is a log parse operation binding the contract event 0x90ad3e4a3c923493a8c220fee236d2da0fe19793440efb15e455031321bcf05f.
//
// Solidity: event ContentRemoved(address spaceAddress, address parentAddress, bytes32 contentId)
func (_Tenant *TenantFilterer) ParseContentRemoved(log types.Log) (*TenantContentRemoved, error) {
	event := new(TenantContentRemoved)
	if err := _Tenant.contract.UnpackLog(event, "ContentRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TenantNewCreatorIterator is returned from FilterNewCreator and is used to iterate over the raw logs and unpacked data for NewCreator events raised by the Tenant contract.
type TenantNewCreatorIterator struct {
	Event *TenantNewCreator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantNewCreatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantNewCreator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantNewCreator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantNewCreatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantNewCreatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantNewCreator represents a NewCreator event raised by the Tenant contract.
type TenantNewCreator struct {
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewCreator is a free log retrieval operation binding the contract event 0xfab88404d3a749e15a120f96063b94e67ce27ba7360469190060a9dc2d862100.
//
// Solidity: event NewCreator(address newOwner)
func (_Tenant *TenantFilterer) FilterNewCreator(opts *bind.FilterOpts) (*TenantNewCreatorIterator, error) {

	logs, sub, err := _Tenant.contract.FilterLogs(opts, "NewCreator")
	if err != nil {
		return nil, err
	}
	return &TenantNewCreatorIterator{contract: _Tenant.contract, event: "NewCreator", logs: logs, sub: sub}, nil
}

// WatchNewCreator is a free log subscription operation binding the contract event 0xfab88404d3a749e15a120f96063b94e67ce27ba7360469190060a9dc2d862100.
//
// Solidity: event NewCreator(address newOwner)
func (_Tenant *TenantFilterer) WatchNewCreator(opts *bind.WatchOpts, sink chan<- *TenantNewCreator) (event.Subscription, error) {

	logs, sub, err := _Tenant.contract.WatchLogs(opts, "NewCreator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantNewCreator)
				if err := _Tenant.contract.UnpackLog(event, "NewCreator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewCreator is a log parse operation binding the contract event 0xfab88404d3a749e15a120f96063b94e67ce27ba7360469190060a9dc2d862100.
//
// Solidity: event NewCreator(address newOwner)
func (_Tenant *TenantFilterer) ParseNewCreator(log types.Log) (*TenantNewCreator, error) {
	event := new(TenantNewCreator)
	if err := _Tenant.contract.UnpackLog(event, "NewCreator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TenantNewOwnerIterator is returned from FilterNewOwner and is used to iterate over the raw logs and unpacked data for NewOwner events raised by the Tenant contract.
type TenantNewOwnerIterator struct {
	Event *TenantNewOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantNewOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantNewOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantNewOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantNewOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantNewOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantNewOwner represents a NewOwner event raised by the Tenant contract.
type TenantNewOwner struct {
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewOwner is a free log retrieval operation binding the contract event 0x3edd90e7770f06fafde38004653b33870066c33bfc923ff6102acd601f85dfbc.
//
// Solidity: event NewOwner(address newOwner)
func (_Tenant *TenantFilterer) FilterNewOwner(opts *bind.FilterOpts) (*TenantNewOwnerIterator, error) {

	logs, sub, err := _Tenant.contract.FilterLogs(opts, "NewOwner")
	if err != nil {
		return nil, err
	}
	return &TenantNewOwnerIterator{contract: _Tenant.contract, event: "NewOwner", logs: logs, sub: sub}, nil
}

// WatchNewOwner is a free log subscription operation binding the contract event 0x3edd90e7770f06fafde38004653b33870066c33bfc923ff6102acd601f85dfbc.
//
// Solidity: event NewOwner(address newOwner)
func (_Tenant *TenantFilterer) WatchNewOwner(opts *bind.WatchOpts, sink chan<- *TenantNewOwner) (event.Subscription, error) {

	logs, sub, err := _Tenant.contract.WatchLogs(opts, "NewOwner")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantNewOwner)
				if err := _Tenant.contract.UnpackLog(event, "NewOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewOwner is a log parse operation binding the contract event 0x3edd90e7770f06fafde38004653b33870066c33bfc923ff6102acd601f85dfbc.
//
// Solidity: event NewOwner(address newOwner)
func (_Tenant *TenantFilterer) ParseNewOwner(log types.Log) (*TenantNewOwner, error) {
	event := new(TenantNewOwner)
	if err := _Tenant.contract.UnpackLog(event, "NewOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TenantVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the Tenant contract.
type TenantVersionConfirmIterator struct {
	Event *TenantVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantVersionConfirm represents a VersionConfirm event raised by the Tenant contract.
type TenantVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ContentId     [32]byte
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x9ea4698cf03054cf1162e170f29c8b7e0dd57bf427ddbe9c7eb0f8072992bfe6.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, bytes32 contentId, string objectHash)
func (_Tenant *TenantFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*TenantVersionConfirmIterator, error) {

	logs, sub, err := _Tenant.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &TenantVersionConfirmIterator{contract: _Tenant.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x9ea4698cf03054cf1162e170f29c8b7e0dd57bf427ddbe9c7eb0f8072992bfe6.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, bytes32 contentId, string objectHash)
func (_Tenant *TenantFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *TenantVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _Tenant.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantVersionConfirm)
				if err := _Tenant.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x9ea4698cf03054cf1162e170f29c8b7e0dd57bf427ddbe9c7eb0f8072992bfe6.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, bytes32 contentId, string objectHash)
func (_Tenant *TenantFilterer) ParseVersionConfirm(log types.Log) (*TenantVersionConfirm, error) {
	event := new(TenantVersionConfirm)
	if err := _Tenant.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TenantVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the Tenant contract.
type TenantVersionDeleteIterator struct {
	Event *TenantVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantVersionDelete represents a VersionDelete event raised by the Tenant contract.
type TenantVersionDelete struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ContentId     [32]byte
	VersionHash   string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0xfa001c965a7cdc4b7bb881545350fa97b5cb15972c2c4110bf60bc63ce078780.
//
// Solidity: event VersionDelete(address spaceAddress, address parentAddress, bytes32 contentId, string versionHash)
func (_Tenant *TenantFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*TenantVersionDeleteIterator, error) {

	logs, sub, err := _Tenant.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &TenantVersionDeleteIterator{contract: _Tenant.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0xfa001c965a7cdc4b7bb881545350fa97b5cb15972c2c4110bf60bc63ce078780.
//
// Solidity: event VersionDelete(address spaceAddress, address parentAddress, bytes32 contentId, string versionHash)
func (_Tenant *TenantFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *TenantVersionDelete) (event.Subscription, error) {

	logs, sub, err := _Tenant.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantVersionDelete)
				if err := _Tenant.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0xfa001c965a7cdc4b7bb881545350fa97b5cb15972c2c4110bf60bc63ce078780.
//
// Solidity: event VersionDelete(address spaceAddress, address parentAddress, bytes32 contentId, string versionHash)
func (_Tenant *TenantFilterer) ParseVersionDelete(log types.Log) (*TenantVersionDelete, error) {
	event := new(TenantVersionDelete)
	if err := _Tenant.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
